// Remove previous elements
document.getElementById('pong-overlay')?.remove();
document.getElementById('pingpong-canvas')?.remove();
document.getElementById('pause-button')?.remove();
document.getElementById('start-menu')?.remove();
document.getElementById('pause-menu')?.remove();
document.getElementById('pong-highscore-badge')?.remove();

// Overlay to hide background
const overlay = document.createElement('div');
overlay.id = 'pong-overlay';
Object.assign(overlay.style, {
  position: 'fixed',
  zIndex: 10000,
  top: 0,
  left: 0,
  width: '100vw',
  height: '100vh',
  background: 'radial-gradient(ellipse at 50% 30%, #232946 70%, #12121a 100%)'
});
document.body.appendChild(overlay);

// High score badge
const highScoreBadge = document.createElement('div');
highScoreBadge.id = 'pong-highscore-badge';
Object.assign(highScoreBadge.style, {
  position: 'fixed',
  top: '32px',
  left: '50%',
  transform: 'translateX(-50%)',
  zIndex: 10003,
  background: 'linear-gradient(90deg, #ffd700 0%, #fffbe0 100%)',
  color: '#232946',
  fontFamily: 'Rubik, Arial, sans-serif',
  fontWeight: 'bold',
  fontSize: '28px',
  padding: '10px 38px 10px 28px',
  borderRadius: '32px',
  boxShadow: '0 4px 24px #0007, 0 0 0 4px #ffe066 inset',
  display: 'flex',
  alignItems: 'center',
  letterSpacing: '1px',
  textShadow: '0 2px 10px #fff8'
});
const trophy = document.createElement('span');
trophy.textContent = 'üèÜ';
trophy.style.fontSize = '32px';
trophy.style.marginRight = '18px';
highScoreBadge.appendChild(trophy);
const highScoreText = document.createElement('span');
highScoreBadge.appendChild(highScoreText);
document.body.appendChild(highScoreBadge);

// --- Game variables ---
let powerUpsEnabled = true;
let aiDifficulty = 'medium';
let canvas, pauseButton, pauseMenu, ctx;
let playerPaddle, aiPaddle, balls, activePowerUp, powerUpTimeout;
let playerScore = 0, aiScore = 0;
let waitingToServe = false, serveCountdown = 0, countdownInterval;
let isPaused = false;
let animationId;
let gameOver = false;
let highScore = +localStorage.getItem('pongHighScore') || 0;
let soundEnabled = true;

// --- Sounds ---
const pongSounds = {
  hit: new Audio('https://cdn.pixabay.com/audio/2022/07/26/audio_124bfae2b0.mp3'),
  score: new Audio('https://cdn.pixabay.com/audio/2022/07/26/audio_124bfae2b0.mp3'),
  powerup: new Audio('https://cdn.pixabay.com/audio/2022/07/26/audio_124bfae2b0.mp3'),
  win: new Audio('https://cdn.pixabay.com/audio/2022/07/26/audio_124bfae2b0.mp3')
};

const baseBallSpeedX = 4;
const baseBallSpeedY = 3.2;
const speedIncreaseFactor = 1.05;
const maxBallSpeed = 7;

const POWERUP_TYPES = {
  MULTIBALL: { color: '#ff006e', symbol: '‚úö', duration: 5000, glow: '#ffb3d1' },
  SLOWMO: { color: '#00f2ea', symbol: 'üê¢', duration: 5000, glow: '#b3f7ff' },
  PADDLE_GROW: { color: '#3ae374', symbol: '‚ñ≤', duration: 5000, glow: '#caffbf' }
};

// --- Start Menu ---
const startMenu = document.createElement('div');
Object.assign(startMenu.style, {
  position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh',
  background: 'linear-gradient(120deg, #232946 0%, #3a86ff 100%)',
  display: 'flex', justifyContent: 'center', alignItems: 'center',
  zIndex: 10002, backdropFilter: 'blur(5px)'
});
startMenu.id = 'start-menu';

const startContent = document.createElement('div');
Object.assign(startContent.style, {
  textAlign: 'center', color: '#fff', fontFamily: 'Rubik, Arial, sans-serif',
  background: 'rgba(30,30,60,0.95)', padding: '48px 48px 36px 48px',
  borderRadius: '24px', boxShadow: '0 8px 32px rgba(0,0,0,0.3)'
});

const title = document.createElement('h1');
title.textContent = 'üéæ Ping Pong';
title.style.fontSize = '56px';
title.style.margin = '0 0 16px 0';
title.style.letterSpacing = '2px';
title.style.textShadow = '0 0 20px #3a86ff';

const winnerMsg = document.createElement('div');
winnerMsg.style.fontSize = '32px';
winnerMsg.style.margin = '0 0 20px 0';
winnerMsg.style.textShadow = '0 0 10px #fff';
winnerMsg.textContent = '';

const difficultyMenu = document.createElement('div');
difficultyMenu.style.margin = '20px 0 32px 0';

const difficultyLabel = document.createElement('div');
difficultyLabel.textContent = 'Difficulty:';
difficultyLabel.style.fontSize = '24px';
difficultyLabel.style.margin = '0 0 10px 0';

function createDifficultyButton(text) {
  const button = document.createElement('button');
  button.textContent = text;
  button.style.display = 'inline-block';
  button.style.width = '120px';
  button.style.margin = '10px';
  button.style.padding = '12px';
  button.style.fontSize = '20px';
  button.style.background = '#232946';
  button.style.border = '2px solid #fff';
  button.style.borderRadius = '8px';
  button.style.color = '#fff';
  button.style.cursor = 'pointer';
  button.style.transition = 'background 0.2s, border 0.2s';
  button.onmouseenter = () => button.style.background = '#3a86ff';
  button.onmouseleave = () => highlightDifficulty();
  return button;
}
const easyButton = createDifficultyButton('üòå Easy');
const mediumButton = createDifficultyButton('üéØ Medium');
const hardButton = createDifficultyButton('üî• Hard');

difficultyMenu.appendChild(difficultyLabel);
difficultyMenu.appendChild(easyButton);
difficultyMenu.appendChild(mediumButton);
difficultyMenu.appendChild(hardButton);

function createModeButton(text, color1, color2) {
  const button = document.createElement('button');
  button.textContent = text;
  button.style.display = 'block';
  button.style.width = '300px';
  button.style.margin = '20px auto';
  button.style.padding = '20px';
  button.style.fontSize = '24px';
  button.style.background = `linear-gradient(45deg, ${color1}, ${color2})`;
  button.style.border = 'none';
  button.style.borderRadius = '12px';
  button.style.color = '#fff';
  button.style.cursor = 'pointer';
  button.style.fontWeight = 'bold';
  button.style.letterSpacing = '1px';
  button.style.transition = 'transform 0.2s, box-shadow 0.2s';
  button.onmouseenter = () => button.style.boxShadow = '0 0 24px #fff7';
  button.onmouseleave = () => button.style.boxShadow = '';
  return button;
}
const powerupButton = createModeButton('üéÆ Power-Up Mode', '#3a86ff', '#8338ec');
const classicButton = createModeButton('üèì Classic Mode', '#2ecc71', '#27ae60');

startContent.appendChild(title);
startContent.appendChild(winnerMsg);
startContent.appendChild(difficultyMenu);
startContent.appendChild(powerupButton);
startContent.appendChild(classicButton);
startMenu.appendChild(startContent);
document.body.appendChild(startMenu);

easyButton.onclick = () => { aiDifficulty = 'easy'; highlightDifficulty(); };
mediumButton.onclick = () => { aiDifficulty = 'medium'; highlightDifficulty(); };
hardButton.onclick = () => { aiDifficulty = 'hard'; highlightDifficulty(); };
function highlightDifficulty() {
  easyButton.style.background = aiDifficulty === 'easy' ? '#3a86ff' : '#232946';
  easyButton.style.border = aiDifficulty === 'easy' ? '2px solid #f4d35e' : '2px solid #fff';
  mediumButton.style.background = aiDifficulty === 'medium' ? '#3a86ff' : '#232946';
  mediumButton.style.border = aiDifficulty === 'medium' ? '2px solid #f4d35e' : '2px solid #fff';
  hardButton.style.background = aiDifficulty === 'hard' ? '#3a86ff' : '#232946';
  hardButton.style.border = aiDifficulty === 'hard' ? '2px solid #f4d35e' : '2px solid #fff';
}
highlightDifficulty();

powerupButton.onclick = () => initializeGame(true);
classicButton.onclick = () => initializeGame(false);

function initializeGame(withPowerups) {
  powerUpsEnabled = withPowerups;
  startMenu.style.display = 'none';
  winnerMsg.textContent = '';
  playerScore = 0;
  aiScore = 0;
  gameOver = false;
  createGameElements();
  resetBall();
  loop();
}

function createGameElements() {
  document.getElementById('pingpong-canvas')?.remove();
  document.getElementById('pause-button')?.remove();
  document.getElementById('pause-menu')?.remove();

  canvas = document.createElement('canvas');
  canvas.id = 'pingpong-canvas';
  canvas.width = 600;
  canvas.height = 400;
  canvas.style.position = 'fixed';
  canvas.style.left = '50%';
  canvas.style.top = '50%';
  canvas.style.transform = 'translate(-50%, -50%)';
  canvas.style.borderRadius = '24px';
  canvas.style.boxShadow = '0 8px 32px rgba(0,0,0,0.4), 0 0 0 4px #222 inset';
  canvas.style.zIndex = 10001;
  document.body.appendChild(canvas);

  ctx = canvas.getContext('2d');

  playerPaddle = {
    y: (canvas.height - 80) / 2,
    height: 80,
    width: 12,
    powerUpTimeout: null
  };
  aiPaddle = {
    y: (canvas.height - 80) / 2,
    height: 80,
    width: 12,
    powerUpTimeout: null
  };

  pauseButton = document.createElement('button');
  pauseButton.id = 'pause-button';
  pauseButton.textContent = '‚è∏Ô∏è';
  pauseButton.style.position = 'fixed';
  pauseButton.style.padding = '12px 24px';
  pauseButton.style.fontSize = '24px';
  pauseButton.style.background = 'rgba(40, 40, 40, 0.9)';
  pauseButton.style.border = '2px solid #fff';
  pauseButton.style.borderRadius = '12px';
  pauseButton.style.color = '#fff';
  pauseButton.style.cursor = 'pointer';
  pauseButton.style.zIndex = '10003';
  pauseButton.style.transition = 'transform 0.2s';
  document.body.appendChild(pauseButton);
  updatePauseButtonPosition();

  pauseMenu = document.createElement('div');
  pauseMenu.id = 'pause-menu';
  pauseMenu.style.position = 'fixed';
  pauseMenu.style.top = '0';
  pauseMenu.style.left = '0';
  pauseMenu.style.width = '100vw';
  pauseMenu.style.height = '100vh';
  pauseMenu.style.background = 'rgba(0, 0, 0, 0.9)';
  pauseMenu.style.display = 'none';
  pauseMenu.style.justifyContent = 'center';
  pauseMenu.style.alignItems = 'center';
  pauseMenu.style.zIndex = '10004';
  pauseMenu.style.backdropFilter = 'blur(5px)';

  const pauseContent = document.createElement('div');
  pauseContent.style.textAlign = 'center';
  pauseContent.style.color = '#fff';
  pauseContent.style.fontFamily = 'Rubik, Arial, sans-serif';
  pauseContent.style.background = 'rgba(30,30,60,0.97)';
  pauseContent.style.padding = '48px 48px 36px 48px';
  pauseContent.style.borderRadius = '24px';
  pauseContent.style.boxShadow = '0 8px 32px rgba(0,0,0,0.3)';

  const pauseTitle = document.createElement('h1');
  pauseTitle.textContent = 'Paused';
  pauseTitle.style.fontSize = '48px';
  pauseTitle.style.margin = '0 0 30px 0';
  pauseTitle.style.textShadow = '0 0 20px #3a86ff';

  const powerupToggle = document.createElement('button');
  powerupToggle.id = 'powerup-toggle';
  powerupToggle.textContent = powerUpsEnabled ? 'üî¥ Disable Power-Ups' : 'üü¢ Enable Power-Ups';
  powerupToggle.style.display = 'block';
  powerupToggle.style.margin = '20px auto 0 auto';
  powerupToggle.style.padding = '15px 30px';
  powerupToggle.style.fontSize = '20px';
  powerupToggle.style.background = '#2c3e50';
  powerupToggle.style.border = 'none';
  powerupToggle.style.borderRadius = '8px';
  powerupToggle.style.color = '#fff';
  powerupToggle.style.cursor = 'pointer';

  const muteButton = document.createElement('button');
  muteButton.textContent = soundEnabled ? 'üîä Sound: ON' : 'üîá Sound: OFF';
  muteButton.style.display = 'block';
  muteButton.style.margin = '20px auto 0 auto';
  muteButton.style.padding = '15px 30px';
  muteButton.style.fontSize = '20px';
  muteButton.style.background = '#232946';
  muteButton.style.border = 'none';
  muteButton.style.borderRadius = '8px';
  muteButton.style.color = '#fff';
  muteButton.style.cursor = 'pointer';
  muteButton.onclick = () => {
    soundEnabled = !soundEnabled;
    muteButton.textContent = soundEnabled ? 'üîä Sound: ON' : 'üîá Sound: OFF';
  };

  const resumeButton = document.createElement('button');
  resumeButton.textContent = '‚ñ∂Ô∏è Resume';
  resumeButton.style.display = 'block';
  resumeButton.style.margin = '24px auto 0 auto';
  resumeButton.style.padding = '15px 30px';
  resumeButton.style.fontSize = '22px';
  resumeButton.style.background = 'linear-gradient(45deg, #3a86ff, #8338ec)';
  resumeButton.style.border = 'none';
  resumeButton.style.borderRadius = '8px';
  resumeButton.style.color = '#fff';
  resumeButton.style.cursor = 'pointer';
  resumeButton.style.fontWeight = 'bold';

  const giveUpButton = document.createElement('button');
  giveUpButton.textContent = 'üè≥Ô∏è Give Up';
  giveUpButton.style.display = 'block';
  giveUpButton.style.margin = '24px auto 0 auto';
  giveUpButton.style.padding = '15px 30px';
  giveUpButton.style.fontSize = '22px';
  giveUpButton.style.background = 'linear-gradient(45deg, #e63946, #ffb4a2)';
  giveUpButton.style.border = 'none';
  giveUpButton.style.borderRadius = '8px';
  giveUpButton.style.color = '#fff';
  giveUpButton.style.cursor = 'pointer';
  giveUpButton.style.fontWeight = 'bold';

  powerupToggle.onclick = () => {
    powerUpsEnabled = !powerUpsEnabled;
    powerupToggle.textContent = powerUpsEnabled ? 'üî¥ Disable Power-Ups' : 'üü¢ Enable Power-Ups';
    if (!powerUpsEnabled) {
      activePowerUp = null;
      clearTimeout(powerUpTimeout);
    }
  };

  resumeButton.onclick = togglePause;
  giveUpButton.onclick = () => {
    gameOver = true;
    pauseMenu.style.display = 'none';
    pauseButton.style.display = 'none';
    winnerMsg.textContent = '';
    startMenu.style.display = 'flex';
    cancelAnimationFrame(animationId);
  };

  pauseContent.appendChild(pauseTitle);
  pauseContent.appendChild(powerupToggle);
  pauseContent.appendChild(muteButton);
  pauseContent.appendChild(resumeButton);
  pauseContent.appendChild(giveUpButton);
  pauseMenu.appendChild(pauseContent);
  document.body.appendChild(pauseMenu);

  pauseButton.onclick = togglePause;

  window.addEventListener('resize', updatePauseButtonPosition);

  upPressed = false;
  downPressed = false;
  document.onkeydown = function(e) {
    if (e.key === 'w' || e.key === 'W') upPressed = true;
    if (e.key === 's' || e.key === 'S') downPressed = true;
    if (e.key === 'p' || e.key === 'P') togglePause();
  };
  document.onkeyup = function(e) {
    if (e.key === 'w' || e.key === 'W') upPressed = false;
    if (e.key === 's' || e.key === 'S') downPressed = false;
  };
}

function updatePauseButtonPosition() {
  if (!canvas || !pauseButton) return;
  const rect = canvas.getBoundingClientRect();
  pauseButton.style.left = `${rect.right - pauseButton.offsetWidth - 20}px`;
  pauseButton.style.top = `${rect.top - pauseButton.offsetHeight - 20}px`;
}

function togglePause() {
  if (gameOver) return;
  isPaused = !isPaused;
  pauseButton.textContent = isPaused ? '‚ñ∂Ô∏è' : '‚è∏Ô∏è';
  pauseMenu.style.display = isPaused ? 'flex' : 'none';
}

function drawBackground() {
  const grad = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
  grad.addColorStop(0, '#232946');
  grad.addColorStop(1, '#3a86ff');
  ctx.fillStyle = grad;
  ctx.fillRect(0, 0, canvas.width, canvas.height);
}

function drawGlow(x, y, color, radius) {
  ctx.save();
  ctx.globalAlpha = 0.5;
  ctx.beginPath();
  ctx.arc(x, y, radius, 0, Math.PI * 2);
  ctx.fillStyle = color;
  ctx.shadowColor = color;
  ctx.shadowBlur = 20;
  ctx.fill();
  ctx.restore();
}

const particles = [];
function addParticles(x, y) {
  for (let i = 0; i < 8; i++) {
    particles.push({
      x, y,
      vx: (Math.random() - 0.5) * 3,
      vy: (Math.random() - 0.5) * 3,
      alpha: 1,
      size: Math.random() * 2 + 1
    });
  }
}
function drawParticles() {
  for (let i = particles.length - 1; i >= 0; i--) {
    const p = particles[i];
    ctx.save();
    ctx.globalAlpha = p.alpha;
    ctx.beginPath();
    ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
    ctx.fillStyle = '#fff';
    ctx.fill();
    ctx.restore();
    p.x += p.vx;
    p.y += p.vy;
    p.alpha -= 0.03;
    if (p.alpha <= 0) particles.splice(i, 1);
  }
}

function draw() {
  drawBackground();

  ctx.save();
  ctx.strokeStyle = '#b8c1ec';
  ctx.lineWidth = 3;
  ctx.setLineDash([18, 18]);
  ctx.beginPath();
  ctx.moveTo(canvas.width/2, 0);
  ctx.lineTo(canvas.width/2, canvas.height);
  ctx.stroke();
  ctx.setLineDash([]);
  ctx.restore();

  if (powerUpsEnabled && activePowerUp) {
    drawGlow(canvas.width/2, activePowerUp.y + activePowerUp.height/2, activePowerUp.type.glow, 30);
    ctx.fillStyle = activePowerUp.type.color;
    ctx.strokeStyle = '#fff';
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.roundRect(canvas.width/2 - 8, activePowerUp.y, 16, activePowerUp.height, 8);
    ctx.fill();
    ctx.stroke();
    ctx.fillStyle = '#fff';
    ctx.font = '24px Rubik, Arial, sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText(activePowerUp.type.symbol, canvas.width/2, activePowerUp.y + activePowerUp.height/2 + 9);
  }

  ctx.save();
  ctx.shadowColor = '#fff';
  ctx.shadowBlur = 6;
  ctx.fillStyle = '#f4d35e';
  ctx.beginPath();
  ctx.roundRect(10, playerPaddle.y, playerPaddle.width, playerPaddle.height, 8);
  ctx.fill();
  ctx.fillStyle = '#ee964b';
  ctx.beginPath();
  ctx.roundRect(canvas.width - 10 - aiPaddle.width, aiPaddle.y, aiPaddle.width, aiPaddle.height, 8);
  ctx.fill();
  ctx.restore();

  balls.forEach(ball => {
    drawGlow(ball.x, ball.y, '#fff', 20);
    ctx.beginPath();
    ctx.arc(ball.x, ball.y, ball.size/2, 0, Math.PI * 2);
    ctx.fillStyle = '#fff';
    ctx.shadowColor = '#fff';
    ctx.shadowBlur = 10;
    ctx.fill();
    ctx.shadowBlur = 0;
    ctx.strokeStyle = '#3a86ff';
    ctx.lineWidth = 2;
    ctx.stroke();
  });

  drawParticles();

  ctx.font = 'bold 40px Rubik, Arial, sans-serif';
  ctx.textAlign = 'left';
  ctx.fillStyle = '#fff';
  ctx.fillText(playerScore, canvas.width/2 - 70, 48);
  ctx.textAlign = 'right';
  ctx.fillText(aiScore, canvas.width/2 + 70, 48);

  if (waitingToServe && serveCountdown > 0) {
    ctx.save();
    ctx.globalAlpha = 0.9;
    ctx.fillStyle = '#232946';
    ctx.fillRect(canvas.width/2 - 60, canvas.height/2 - 60, 120, 120);
    ctx.restore();
    ctx.font = 'bold 80px Rubik, Arial, sans-serif';
    ctx.textAlign = 'center';
    ctx.fillStyle = '#f4d35e';
    ctx.fillText(serveCountdown, canvas.width/2, canvas.height/2 + 30);
  }
}

function spawnPowerUp() {
  if (!powerUpsEnabled) return;
  if (activePowerUp || Math.random() > 0.02) return;
  const types = Object.keys(POWERUP_TYPES);
  const type = POWERUP_TYPES[types[Math.floor(Math.random() * types.length)]];
  const segmentHeight = 44;
  activePowerUp = {
    type,
    y: Math.floor(Math.random() * (canvas.height/segmentHeight)) * segmentHeight + 6,
    height: segmentHeight - 12
  };
  powerUpTimeout = setTimeout(() => activePowerUp = null, 10000);
}

function checkPowerUpCollision(ball) {
  if (!powerUpsEnabled || !activePowerUp) return;
  if (ball.x + ball.size/2 > canvas.width/2 - 8 &&
      ball.x - ball.size/2 < canvas.width/2 + 8 &&
      ball.y + ball.size/2 > activePowerUp.y &&
      ball.y - ball.size/2 < activePowerUp.y + activePowerUp.height) {
    if (soundEnabled) pongSounds.powerup.play();
    applyPowerUp(activePowerUp.type, ball.lastHitBy);
    clearTimeout(powerUpTimeout);
    activePowerUp = null;
  }
}

function applyPowerUp(type, owner) {
  if (type === POWERUP_TYPES.PADDLE_GROW) {
    const paddle = owner === 'player' ? playerPaddle : aiPaddle;
    if (paddle.powerUpTimeout) clearTimeout(paddle.powerUpTimeout);
    paddle.height = 80 * 1.5;
    paddle.powerUpTimeout = setTimeout(() => paddle.height = 80, type.duration);
  }
  if (type === POWERUP_TYPES.SLOWMO) {
    const modifier = owner === 'ai' ? 1.25 : 0.8;
    balls.forEach(b => {
      b.speedX *= modifier;
      b.speedY *= modifier;
      capBallSpeed(b);
    });
    setTimeout(() => {
      balls.forEach(b => {
        b.speedX /= modifier;
        b.speedY /= modifier;
        capBallSpeed(b);
      });
    }, type.duration);
  }
  if (type === POWERUP_TYPES.MULTIBALL) {
    const newBalls = balls.flatMap(b => [
      { ...b, speedX: b.speedX * 1.2, speedY: b.speedY * 1.2, lastHitBy: owner },
      { ...b, speedX: -b.speedX, speedY: -b.speedY, lastHitBy: owner }
    ]);
    newBalls.forEach(capBallSpeed);
    balls.push(...newBalls);
  }
}

function capBallSpeed(ball) {
  const mag = Math.sqrt(ball.speedX ** 2 + ball.speedY ** 2);
  if (mag > maxBallSpeed) {
    ball.speedX = (ball.speedX / mag) * maxBallSpeed;
    ball.speedY = (ball.speedY / mag) * maxBallSpeed;
  }
}

function clamp(val, min, max) {
  return Math.max(min, Math.min(max, val));
}

function resetBall() {
  balls = [{
    x: canvas.width/2,
    y: canvas.height/2,
    size: 16,
    speedX: baseBallSpeedX,
    speedY: baseBallSpeedY,
    lastHitBy: null
  }];
  waitingToServe = true;
  serveCountdown = 3;
  if (countdownInterval) clearInterval(countdownInterval);
  countdownInterval = setInterval(() => {
    if (!isPaused && !gameOver) {
      serveCountdown--;
      if (serveCountdown === 0) {
        clearInterval(countdownInterval);
        setTimeout(() => {
          balls.forEach(b => {
            b.speedX = baseBallSpeedX * (Math.random() > 0.5 ? 1 : -1);
            b.speedY = baseBallSpeedY * (Math.random() * 2 - 1);
          });
          waitingToServe = false;
        }, 500);
      }
    }
  }, 1000);
}

function update() {
  if (isPaused || gameOver) return;
  spawnPowerUp();

  if (upPressed) playerPaddle.y -= 6;
  if (downPressed) playerPaddle.y += 6;
  playerPaddle.y = clamp(playerPaddle.y, 0, canvas.height - playerPaddle.height);

  if (!waitingToServe && balls.length > 0) {
    let targetY = balls[0].y - aiPaddle.height/2;
    let speedMultiplier = 0.7;
    let accuracy = 1;

    if (aiDifficulty === 'easy') {
      speedMultiplier = 0.5;
      accuracy = 0.8;
      targetY += (Math.random() - 0.5) * 50;
    } else if (aiDifficulty === 'medium') {
      speedMultiplier = 0.7;
      accuracy = 0.9;
      targetY += (Math.random() - 0.5) * 20;
    } else if (aiDifficulty === 'hard') {
      speedMultiplier = 0.9;
      accuracy = 1.0;
      if (balls[0].speedX > 0) {
        const predictX = canvas.width - 10 - aiPaddle.width;
        const timeToReach = (predictX - balls[0].x) / balls[0].speedX;
        targetY = balls[0].y + (balls[0].speedY * timeToReach);
      }
    }

    const moveDistance = clamp(targetY - aiPaddle.y, -6 * speedMultiplier, 6 * speedMultiplier) * accuracy;
    aiPaddle.y += moveDistance;
    aiPaddle.y = clamp(aiPaddle.y, 0, canvas.height - aiPaddle.height);
  }

  balls.forEach(ball => {
    if (!waitingToServe) {
      ball.x += ball.speedX;
      ball.y += ball.speedY;
    }
    checkPowerUpCollision(ball);

    if (ball.y <= 0 || ball.y >= canvas.height) ball.speedY *= -1;

    if (ball.speedX < 0 &&
        ball.x - ball.size/2 <= 10 + playerPaddle.width &&
        ball.y + ball.size/2 >= playerPaddle.y &&
        ball.y - ball.size/2 <= playerPaddle.y + playerPaddle.height) {
      ball.x = 10 + playerPaddle.width + ball.size/2;
      ball.speedX = Math.abs(ball.speedX) * speedIncreaseFactor;
      ball.speedY += (Math.random() - 0.5) * 2;
      capBallSpeed(ball);
      ball.lastHitBy = 'player';
      addParticles(ball.x, ball.y);
      if (soundEnabled) pongSounds.hit.play();
    }

    if (ball.speedX > 0 &&
        ball.x + ball.size/2 >= canvas.width - 10 - aiPaddle.width &&
        ball.y + ball.size/2 >= aiPaddle.y &&
        ball.y - ball.size/2 <= aiPaddle.y + aiPaddle.height) {
      ball.x = canvas.width - 10 - aiPaddle.width - ball.size/2;
      ball.speedX = -Math.abs(ball.speedX) * speedIncreaseFactor;
      ball.speedY += (Math.random() - 0.5) * 2;
      capBallSpeed(ball);
      ball.lastHitBy = 'ai';
      addParticles(ball.x, ball.y);
      if (soundEnabled) pongSounds.hit.play();
    }

    if (ball.x < 0) {
      aiScore++;
      balls.splice(balls.indexOf(ball), 1);
      if (soundEnabled) pongSounds.score.play();
    }
    if (ball.x > canvas.width) {
      playerScore++;
      balls.splice(balls.indexOf(ball), 1);
      if (soundEnabled) pongSounds.score.play();
    }
  });

  if (playerScore > highScore) {
    highScore = playerScore;
    localStorage.setItem('pongHighScore', highScore);
  }
  highScoreText.textContent = `${highScore}`;

  if (playerScore >= 9 || aiScore >= 9) {
    gameOver = true;
    cancelAnimationFrame(animationId);
    pauseButton.style.display = 'none';
    winnerMsg.textContent = playerScore >= 9 ? "üèÜ You Win! üèÜ" : "ü§ñ AI Wins! ü§ñ";
    startMenu.style.display = 'flex';
    if (soundEnabled) pongSounds.win.play();
    return;
  }

  if (balls.length === 0 && !gameOver) resetBall();
}

function loop() {
  update();
  draw();
  if (!gameOver) animationId = requestAnimationFrame(loop);
}

